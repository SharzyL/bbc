syntax = "proto3";

option go_package = "github.com/SharzyL/bbc/pb";

package bbc_proto;

service Miner {
  rpc GetStatus(GetStatusReq) returns (GetStatusAns);

  rpc PeekChain(PeekChainReq) returns (PeekChainAns);
  rpc AdvertiseBlock(AdvertiseBlockReq) returns (AdvertiseBlockAns);

  rpc GetFullBlock(HashVal) returns (FullBlock);
  rpc FindTx(HashVal) returns (TxInfo);
  rpc PeekChainByHeight(PeekChainByHeightReq) returns (PeekChainByHeightAns);

  rpc UploadTx(Tx) returns (UploadTxAns);
  rpc LookupUtxo(PubKey) returns (LookupUtxoAns);
}

// basic types
message HashVal {
  bytes bytes = 1;
}

message Sig {
  bytes bytes = 1;
}

message PubKey {
  bytes bytes = 1;
}

// TxIn is the input transaction, it points to the PrevOutIdx-th TxOut of the transaction of hash PrevTx
// To verify the ownerness, Sig should be equal to SigAlgorithm(txout.ReceiverPubKey, PrevTx + PrevOutIdx)
message TxIn {
  HashVal prev_tx = 1;
  uint32 prev_out_idx = 2;
  Sig sig = 3;
}

message TxOut {
  uint64 value = 1;
  PubKey receiver_pub_key = 2;
}

message Tx {
  bool valid = 1;
  repeated TxIn tx_in_list = 2;
  repeated TxOut tx_out_list = 3;
  int64 timestamp = 4;
}

message BlockHeader {
  HashVal prev_hash = 1;
  HashVal merkle_root = 2;
  int64 timestamp = 3;
  int64 height = 4;
  uint64 difficulty = 5;

  // nounce should always to kept the last, to keep compatibility with miner
  bytes block_nounce = 6;
}

message TxMerkleNode {
  HashVal hash = 1;
}

message FullBlock {
  BlockHeader header = 1;
  repeated Tx tx_list = 2;
  repeated TxMerkleNode merkle_tree = 3;
}

//--------------------
// GetStatus
//--------------------
message GetStatusReq {

}

message GetStatusAns {
  string description = 1;
}

//--------------------
// PeekChain
//--------------------
message PeekChainReq {
  // if top_hash is present, use top_hash
  // else use chain top
  optional HashVal top_hash = 1;

  optional int64 limit = 2;
}

message PeekChainAns {
  // a sequence of headers from newest to latest
  repeated BlockHeader headers = 1;
}

//--------------------
// AdvertiseBlock
//--------------------
message AdvertiseBlockReq {
  BlockHeader header = 1;
  string addr = 2;
  repeated string peers = 3;
  repeated int64 heights = 4;
}

message AdvertiseBlockAns {
  BlockHeader header = 1;
}

//--------------------
// AdvertiseBlock
//--------------------
message UploadTxAns {

}

//--------------------
// FindTx
//--------------------
message TxInfo {
  optional BlockHeader block_header = 1;
}

//--------------------
// PeekChainByHeight
//--------------------
message PeekChainByHeightReq {
  int64 height = 1;
}

message PeekChainByHeightAns {
  optional BlockHeader header = 1;
}

//--------------------
// LookupUtxo
//--------------------
message Utxo {
  uint64 value = 1;
  HashVal tx_hash = 2;
  uint32 tx_out_idx = 3;
  PubKey pub_key = 4;
}

message LookupUtxoAns {
  repeated Utxo utxo_list = 1;
}
